#define BLYNK_TEMPLATE_ID "TMPL6408_qP26"
#define BLYNK_TEMPLATE_NAME "Quickstart Template"
#define BLYNK_AUTH_TOKEN "rxlgYwiG8pdMHkzNWfjZ3SAq7dFaCp9x"

/* Comment this out to disable prints and save space */

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h> //M
#include<HardwareSerial.h>

#define Umax 66 // maximum angle of the servomotr in degrees
#define Umin -66 // minimun angle
#define Umax_rad 1.151  // maximum angle of the servomotr in radiants
#define Umin_rad -1.151 // minimun angle
#define T 0.09 // sampling time

double Kp=0;
double Kd=0;
double Ki=0;
double setpoint_online=0;

const int echoPin2= 33; 
const int trigPin2= 32;
const int echoPin1= 33; // for main sensor
const int trigPin1= 32; // for main sensor

Servo servo;

double setpoint, setpoint_prec;  // In meters : 30cm --> 0.3m
double y, y_prec;
double error;
double P, I, D, U;
double I_prec=0, U_prec=0, D_prec=0;        
boolean Saturation = false;


double measure_1 (void);
double measure_2 (void);
void move_servo(int);

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Tenda_E39220";
char pass[] = "adventure01";

BlynkTimer timer;

// This function is called every time the Virtual Pin 0 state changes
BLYNK_WRITE(V4)
{
  // Set incoming value from pin V0 to a variable
  Kp = param.asInt();
  
}
BLYNK_WRITE(V5)
{
  // Set incoming value from pin V0 to a variable
  setpoint_online = param.asInt();
  
}
BLYNK_WRITE(V6)
{
  // Set incoming value from pin V0 to a variable
  Kd = param.asInt();
  
}

BLYNK_WRITE(V7)
{
  // Set incoming value from pin V0 to a variable
  Ki = param.asInt();
  
}

// This function is called every time the device is connected to the Blynk.Cloud
BLYNK_CONNECTED()
{
  // Change Web Link Button message to "Congratulations!"
  Blynk.setProperty(V3, "offImageUrl", "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations.png");
  Blynk.setProperty(V3, "onImageUrl",  "https://static-image.nyc3.cdn.digitaloceanspaces.com/general/fte/congratulations_pressed.png");
  Blynk.setProperty(V3, "url", "https://docs.blynk.io/en/getting-started/what-do-i-need-to-blynk/how-quickstart-device-was-made");
}

// This function sends Arduino's uptime every second to Virtual Pin 2.
void myTimerEvent()
{
  // You can send any value at any time.
  // Please don't send more that 10 values per second.
  Blynk.virtualWrite(V2, millis() / 1000);
}




void setup() {

   Serial.begin(115200);

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  // You can also specify server:
  //Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass, "blynk.cloud", 80);
  //Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass, IPAddress(192,168,1,100), 8080);

  // Setup a function to be called every second
  timer.setInterval(1000L, myTimerEvent);

   pinMode(trigPin2, OUTPUT);
   pinMode(echoPin2, INPUT);
   pinMode(trigPin1, OUTPUT);
   pinMode(echoPin1, INPUT);
   servo.attach(12);   
  
   delay(1000); 
   move_servo(90);
   delay(2000);
   setpoint_prec = measure_2();  // cube
   delay(1000);
   y_prec = measure_1();  // cart
   delay(1000);
   
}

void loop() {
   Blynk.run();
  timer.run();
  
   setpoint = measure_2();  // distance of the cube from the sensor ( meters )
   
   setpoint = 0.53*setpoint + 0.47*setpoint_prec  ;
   
   delay(3);
   
   y = measure_1();  // distance of the cart from the sensor ( meters )   
   y =  0.53*y + 0.47*y_prec  ;   // (  alfa*y :   if alfa increases, y less attenuated and similar to the measured y  --> so the measurement is noisy but fast )
  
   delay (3);
   
   error = round( 100*(y - setpoint) )*0.01;     // meters            
   
   P = Kp*error;
   
   if ( ! Saturation )  I = I_prec + T*Ki*error;

   D = (Kd/T)*(y - y_prec);
   
   D = 0.56*D + 0.44*D_prec;    // filtering D    
   
   U = P + I + round(100*D)*0.01 ;  // U in radiants
   
   if ( U < Umin_rad)  {
                        U=Umin_rad; 
                        Saturation = true;
                       }
                   
   else if ( U > Umax_rad)  {
                             U=Umax_rad; 
                             Saturation = true;
                            }

   else     Saturation = false;                   
   
   U=round(U*180/M_PI);     // Transform U in degrees. Now I have :   -63° < U < 63°   
          
   U=map(U, Umin, Umax, 24, 156); // I map the computed value of U to the corresponding value of the servomotor
   
   if (U < 83 || U > 95 || abs(error) > 0.02 ) {
    
    move_servo( round(U) );   // I continue until I have error and the control action U is greater than a threshold.
  
   }

   delay (24);  

   //Serial.print(setpoint*100);
   //Serial.print(" ");
   //Serial.print(y*100);
   //Serial.print(" ");
   //Serial.print(U);
   //Serial.println();
   
   I_prec = I;
   y_prec = y;
   D_prec = D;
   setpoint_prec = setpoint;     

    Serial.print("kp: ");
  Serial.println(Kp);

  Serial.print("kd: ");
  Serial.println(Kd);

  Serial.print("ki: ");
  Serial.println(Ki);

  Serial.println("Setpoint: ");
  Serial.println(setpoint);

  Serial.println("Distance: ");
  Serial.println(y);
}


double measure_1 (void) {

long durata=0;
float distanza=0; 

digitalWrite(trigPin1, LOW); 
delayMicroseconds(10); 

digitalWrite(trigPin1, HIGH);
delayMicroseconds(10);
 
digitalWrite(trigPin1, LOW);

durata = pulseIn(echoPin1, HIGH);
distanza = (double)durata/58.2;

delay(30);

if (distanza > 42) distanza=43;
else if (distanza < 0) distanza=0;

return 0.01*(distanza-1.5+0.5);   // meters   

}

 double measure_2 (void) {

   double con;
   con=setpoint_online * 0.01;
  return con;

} 

void move_servo(int u) {
  
  

//Serial.println("angle: ");
//Serial.println(u-map(u, 30, 150, 14, 3));
  
servo.write(u-map(u, 30, 150, 14, 3));
//   
}